{"version":3,"sources":["components/SearchDatePicker.js","components/UI/Card.js","components/UI/Like.js","components/Photo.js","containers/DisplayImages.js","containers/Images.js","components/UI/Header.js","App.js","reportWebVitals.js","index.js"],"names":["SearchDatePicker","props","useState","startDate","setStartDate","endDate","setEndDate","Fragment","className","htmlFor","selected","maxDate","Date","onSelect","date","onChange","changeStartDate","placeholderText","tabIndex","minDate","changeEndDate","Card","classes","children","Like","state","liked","toggle","localLiked","setState","onClick","this","title","icon","faThumbsUp","style","color","Component","Photo","formattedDate","moment","format","images","media_type","src","photo","alt","DisplayImages","isLoading","type","height","width","imagesData","length","map","image","url","API_KEY","process","Images","startDateChangedHandler","start","loadData","endDateChangedHandler","end","formattedStartDate","formattedEndDate","fetch","then","response","json","data","catch","err","console","log","role","Header","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7825c2fa.chunk.js","sourcesContent":["/*Component that has form with start and end date input.\r\nThe dates are displayed using a date picker.\r\n*/\r\n\r\n\r\nimport React, { useState } from \"react\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport './SearchDatePicker.css';\r\n\r\nfunction SearchDatePicker(props) {\r\n \r\n  const [startDate, setStartDate] = useState();\r\n  const [endDate, setEndDate] = useState();\r\n\r\n  \r\n return (\r\n  <React.Fragment>\r\n    <form className=\"Search\">\r\n    {/* Accesibilty feautre http://simplyaccessible.com/article/react-a11y/ */}\r\n    <label htmlFor=\"Enter start date for image search\">Start Date:</label>\r\n     {/* Date picker for selecting start date.\r\n      https://www.npmjs.com/package/react-datepicker*/}\r\n     <DatePicker\r\n       selected={props.startDate}\r\n       startDate={startDate}\r\n       endDate={endDate}\r\n       maxDate={new Date()}\r\n       onSelect={(date)=>setStartDate(date)}\r\n       onChange={props.changeStartDate}\r\n       placeholderText=\"Enter start date\"\r\n       tabIndex='0'\r\n       aria-describedby=\"Start Date\">\r\n       </DatePicker>\r\n      <label htmlFor=\"Enter end date for image search\">End Date:</label>\r\n       {/* Date picker for selecting end date.\r\n      https://www.npmjs.com/package/react-datepicker*/}\r\n      <DatePicker\r\n       selected={props.endDate}\r\n       startDate={startDate}\r\n       endDate={endDate}\r\n       minDate={startDate}\r\n       maxDate={new Date()}\r\n       onChange={props.changeEndDate}\r\n       onSelect={(date)=>setEndDate(date)}\r\n       placeholderText=\"Enter end date\"\r\n       tabIndex='0'\r\n       aria-describedby=\"End Date\"\r\n     >\r\n     </DatePicker>\r\n   </form>\r\n   </React.Fragment>\r\n\r\n );\r\n}\r\n\r\nexport default SearchDatePicker;","import './Card.css';\r\n\r\nconst Card=(props)=>{\r\n    const classes='Card '+props.className;\r\n    return <div className={classes}>{props.children}</div>\r\n\r\n}\r\n\r\nexport default Card;","/*Like button to like or dislike the image displayed.\r\nhttps://fontawesome.com/v5.15/how-to-use/on-the-web/using-with/react */\r\n\r\nimport React, { Component } from \"react\";\r\nimport { faThumbsUp } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport './Like.css';\r\nclass Like extends Component {\r\nstate = { liked: false };\r\n\r\n// Function to toggle the state variable liked\r\ntoggle = () => {\r\n\tlet localLiked = this.state.liked;\r\n\tlocalLiked = !localLiked;\r\n\tthis.setState({ liked: localLiked });\r\n};\r\nrender() {\r\n\treturn (\r\n\t\t/*Enclosed in button to make the icon accesible with aria-label */\r\n\t\t<button tabIndex='0' onClick={this.toggle}\r\n\t\ttitle=\"Like or Dislike\"  \r\n\t\taria-label={this.state.liked?\"Liked\":\"Unliked\"}\r\n\t\t >\r\n\t\t{/*Color of icon is based on liked. Blue means liked and default black is not liked.*/}\r\n\t\t<FontAwesomeIcon icon={faThumbsUp} \r\n\t\tstyle={this.state.liked?{color:\"blue\" }:null }\r\n\t\t/>\r\n\t\t</button>\r\n\t);\r\n}\r\n}\r\n\r\nexport default Like;\r\n","/* Component which renders images,title and date captured on to the screen.\r\nEach image is checked for its media_type and\r\nif it is an image it is displayed.\r\nIt is enclosed in a card and also has a Like button with it. */\r\nimport Card from \"./UI/Card\";\r\nimport \"./Photo.css\";\r\nimport Like from \"./UI/Like\";\r\nimport moment from \"moment\";\r\n\r\nconst Photo = (props) => {\r\n  /*Date received from API isformatted to 'MM/DD/YYYY' for display to users */\r\n  let formattedDate = moment(props.date).format(\"MM/DD/YYYY\");\r\n  let images = null;\r\n  /*Check for media type */\r\n  if (props.media_type === \"image\") {\r\n    images = (\r\n      <Card className=\"Photo\">\r\n        <img src={props.photo} alt={props.title} tabIndex=\"0\" />\r\n        <h5>{props.title}</h5>\r\n        <h6>{formattedDate}</h6>\r\n        <Like />\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return <div>{images}</div>;\r\n};\r\n\r\nexport default Photo;\r\n","/* Container where the results from the API call is processed.\r\n */\r\nimport Photo from \"../components/Photo\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport \"./DisplayImages.css\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\n\r\nconst DisplayImages = (props) => {\r\n\r\n  /* Function where the Array of images are accessed using map()\r\n  and each image is passed to the Photo component */\r\n  function showImage() {\r\n    return props.imagesData.map((image) => {\r\n      return (\r\n        <Photo\r\n          key={image.url}\r\n          photo={image.url}\r\n          title={image.title}\r\n          media_type={image.media_type}\r\n          date={image.date}\r\n        />\r\n      );\r\n    });\r\n  }\r\n    /*Showing Loading during the API fetch using\r\n  https://www.npmjs.com/package/react-loader-spinner\r\n  TODO:Accessibility for Loader to be added*/\r\n\r\n if (props.isLoading) {\r\n    return    <Loader type=\"Circles\" color=\"#00BFFF\" height={80} width={80} \r\n  />;\r\n  } \r\n  /*Display appropriate message when no images are there in the specified date range\r\n  or if the returned result is video.\r\n  Example:Start Date-17 Sept 2021, End Date-17Sept 2021 has no Images.\r\n  Currently displaying only images on the page.*/\r\n  else if ((props.imagesData.length === 0)||((props.imagesData.length===1)&&(props.imagesData[0].media_type===\"video\"))) {\r\n    return (\r\n      <div className=\"DisplayImagesErr\">\r\n        Sorry, no images found.\r\n          </div>\r\n    );\r\n  }\r\n  /*Call function to display each image from result set.*/ \r\n  else {\r\n    return <div className=\"DisplayImages\">{showImage()}</div>;\r\n  }\r\n  }\r\nexport default DisplayImages;\r\n","/*Images class container where the date filter and \r\nthe extracted images reside.\r\nThe API call is also done in this component.*/\r\n\r\n\r\nimport React, { Component } from \"react\";\r\nimport SearchDatePicker from \"../components/SearchDatePicker\";\r\nimport DisplayImages from \"../containers/DisplayImages\";\r\nimport moment from \"moment\";\r\n\r\nconst API_KEY = process.env.REACT_APP_API_KEY;\r\nclass Images extends Component {\r\n  /*State definitions*/\r\n  state = {\r\n    imagesData: [],\r\n    startDate: new Date(),\r\n    endDate: new Date(),\r\n    isLoading: false,\r\n  };\r\n\r\n  //Call to method that calls the API passing the start and end dates on mount\r\n  componentDidMount() {\r\n    this.loadData(this.state.startDate, this.state.endDate);\r\n  }\r\n\r\n  //Method to change state of start date to the selected date in datepicker\r\n  startDateChangedHandler = (start) => {\r\n    this.setState({ startDate: start });\r\n    this.loadData(start, this.state.endDate);\r\n  };\r\n\r\n  //Method to change state of end date to the selected date in datepicker\r\n  endDateChangedHandler = (end) => {\r\n    this.setState({ endDate: end });\r\n    this.loadData(this.state.startDate, end);\r\n  };\r\n\r\n  /*Method to call API. The date is formatted to match the field format \r\n  required in the API call.\r\n  isLoading state is updated.\r\n  TODO:Bad request errors to be handled.\r\n  TODO:Prompt user to enter Date between Jun 16, 1995 and current date. \r\n  (API has first entry on Jun 16 1995)\r\n  */\r\n  loadData = (startDate, endDate) => {\r\n    this.setState({ isLoading: true });\r\n    let formattedStartDate = moment(startDate).format(\"YYYY-MM-DD\");\r\n    let formattedEndDate = moment(endDate).format(\"YYYY-MM-DD\");\r\n    const url = `https://api.nasa.gov/planetary/apod?api_key=${API_KEY}&start_date=${formattedStartDate}&end_date=${formattedEndDate}`;\r\n    fetch(url)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        this.setState({ imagesData: data, isLoading: false });\r\n      })\r\n      .catch((err) => console.log(err))\r\n   \r\n  };\r\n\r\n  render() {\r\n\r\n       return (\r\n        <React.Fragment>\r\n          {/* Accessibilty feature to read out number of results fetched in API call.\r\n          https://www.freecodecamp.org/news/next-level-accessibility-freecodecamp-guide-7cbd6473eabd/\r\n          TODO:Currently not sending appropriate message for zero results in accessibilty.\r\n          TODO:Number of images is incorrect as the resultset includes video too which is not\r\n          currently displayed in the App.\r\n            */}\r\n          <div\r\n            aria-atomic=\"true\"\r\n            aria-live=\"polite\"\r\n            className=\"sr-only\"\r\n            role=\"status\"\r\n          >\r\n            {\" \"}\r\n            {`${this.state.imagesData.length} image${\r\n              this.state.imagesData.length === 1 ? \"\" : \"s\"\r\n            } found`}\r\n          </div>\r\n          {/*Date Picker to select start and end dates*/}\r\n          <SearchDatePicker\r\n            startDate={this.state.startDate}\r\n            endDate={this.state.endDate}\r\n            changeStartDate={this.startDateChangedHandler}\r\n            changeEndDate={this.endDateChangedHandler}\r\n          />\r\n          {/*Component where the result set is processed*/}\r\n          <DisplayImages imagesData={this.state.imagesData} isLoading={this.state.isLoading} />\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  }\r\n  \r\n\r\n\r\nexport default Images;\r\n","/*Header file that displays the App name and tagline*/\r\n\r\n\r\nimport './Header.css';\r\n\r\nconst Header =()=>(\r\n    <div className=\"Header\">\r\n        <h2>The Spacebook</h2>\r\n        <h5><i>for the aspiring astronauts in all of us!!</i></h5>\r\n    </div>\r\n\r\n);\r\n\r\nexport default Header;","/*Root App container where the app lives. Header and Images components are called here. */\r\n\r\nimport './App.css';\r\nimport Images from './containers/Images';\r\nimport Header from './components/UI/Header';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header/>\r\n      <Images/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}